{"version":3,"sources":["components/save.js","components/list.js","container/App.js","serviceWorker.js","index.js"],"names":["Save","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","number","error","onChange","bind","assertThisInitialized","e","_this$setState","setState","defineProperty","target","value","_this2","preventDefault","list","props","_this$state","user","length","push","save","shouldSave","find","toString","_this$state2","react_default","a","createElement","className","onClick","showContacts","type","onSubmit","placeholder","style","color","Component","List","updatedList","filter","i","add","align","border","map","delete","App","showContact","changeShow","components_list","Boolean","window","location","hostname","match","ReactDOM","render","container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3eacba62.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Save extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            name : \"\",\r\n            number : \"\",\r\n            error : null,\r\n        }\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n    onChange (e){\r\n        this.setState({[e.target.name] : e.target.value , error : null})\r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault()\r\n        //destructure list because we are going to use it more then once\r\n        const {list} = this.props\r\n        const {name , number} = this.state\r\n        const user = {\r\n            name,\r\n            number\r\n        }\r\n        if(name===\"\" || number===\"\"){\r\n            this.setState({error : \"All fields are required!\"})\r\n        }\r\n        else if(number.length>10){\r\n            this.setState({error : \"Number can be at most 10 digits long\"})\r\n        }\r\n        else if(list.length===0){\r\n            list.push(user)\r\n            this.props.save(list)\r\n            this.setState({name : \"\" , number : \"\"})\r\n        }\r\n        else{\r\n            let shouldSave = true\r\n            list.find(user=>{\r\n                if(user.number.toString()===number){\r\n                    this.setState({error : \"Number is alredy saved!\"})\r\n                    shouldSave = false\r\n                    return\r\n                }\r\n            })\r\n            if(shouldSave){\r\n                list.push(user)\r\n                this.props.save(list)\r\n                this.setState({name : \"\" , number : \"\"})\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const {name , number , error} = this.state\r\n        return (<div className='form-container'>\r\n                <button className=\"hbutton\" onClick={this.props.showContacts}>Show contacts</button>\r\n                <form className='form-body' type = \"post\" onSubmit={this.onSubmit.bind(this)}>\r\n                <label>Add Subscriber</label>\r\n                <input\r\n                placeholder=\"Name\"\r\n                value = {name}\r\n                name = \"name\"\r\n                onChange={this.onChange}\r\n                />\r\n                <br/>\r\n                <input\r\n                placeholder=\"Number\"\r\n                value = {number}\r\n                name = \"number\"\r\n                type=\"number\"\r\n                onChange={this.onChange}\r\n                /><br/>\r\n                <input type=\"submit\" value=\"Save\"/><br/>\r\n                {error && <small style={{color : \"red\"}}>{error}</small>}\r\n                </form>\r\n                <p><b>Subscriber to be added</b></p>\r\n         <p>name : {name} <br/>number : {number}</p>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Save;","import React, {Component} from 'react';\r\n\r\nclass List extends Component {\r\n    delete(number){\r\n       const {list} = this.props\r\n       let updatedList =  list.filter(user=>user.number!==number)\r\n       this.props.save(updatedList)\r\n    }\r\n\r\n    render() {\r\n        const {list} = this.props\r\n        let i=1\r\n        return (\r\n            <div>\r\n                <div className=\"list-container\" >\r\n                    <button className=\"hbutton\" onClick={this.props.add}>Back</button>\r\n                    <p align=\"center\">Phone Directory</p>\r\n                    <table className=\"list\" align=\"center\" border = \"1px solid\">\r\n                        <tr>\r\n                            <td>S.N.</td>\r\n                            <td>Name</td>\r\n                            <td>Number</td>\r\n                            <td>Action</td>\r\n                        </tr>\r\n                        {list.length!==0 ? list.map(user=>\r\n                                <tr>\r\n                                    <td className=\"sn\">{i++}</td>\r\n                                    <td className=\"uname\">{user.name}</td>\r\n                                    <td className=\"num\">{user.number}</td>\r\n                                    <td className=\"abutton\"><button onClick={this.delete.bind(this , user.number)} >delete</button></td>\r\n                                </tr>\r\n                            ) :\r\n                        <tr>\r\n                            <td className='sn'>NaN</td>\r\n                            <td className=\"uname\">Empty</td>\r\n                            <td className=\"num\">Empty</td>\r\n                            <td>Null</td>\r\n                        </tr>\r\n                        }\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport '../assets/App.css';\nimport Save from \"../components/save\";\nimport List from \"../components/list\";\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state = {\n            list : [],\n            showContact : false\n        }\n        this.save = this.save.bind(this)\n        this.changeShow = this.changeShow.bind(this)\n    }\n  save(updatedList){\n      this.setState({list : updatedList , showContact : true})\n  }\n  changeShow(){\n      const showContact = !this.state.showContact\n      this.setState({showContact})\n  }\n\n  render() {\n     const {list , showContact} = this.state\n    return (\n      <div className=\"App\">\n          {showContact ?\n          <List\n              list = {list}\n              save = {this.save}\n              add = {this.changeShow}\n          />:\n          <Save\n              list = {list}\n              save = {this.save}\n              showContacts ={this.changeShow}\n          />\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}